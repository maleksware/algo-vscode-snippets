{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log("$1");",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"cppbase": {
        "scope": "cpp",
		"prefix": "cppbase",
		"body": [
		"#include <bits/stdc++.h>",
		"#define endl \"\\n\"",
        "",
		"#pragma GCC optimize(\"O3,unroll-loops\")",
		"#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")",
        "",
		"using namespace std;",
		"using ll = long long;",
		"using ld = long double;",
        "",
		"ll inf = 1e9;",
        "",
		"int main() {",
		"  ios::sync_with_stdio(0);",
		"  cin.tie(0);",
        "",
		"  $1",
        "",
		"  return 0;",
		"}",
        ""
        ]
    },

    "minp": {
        "scope": "python",
        "prefix": "minp",
        "body": [
            "map(int, input().split())",
            ""
        ]
    },

    "lmap": {
        "scope": "python",
        "prefix": "lmap",
        "body": [
            "list(map(int, input().split()))",
            ""
        ]
    },

    "fort": {
        "scope": "python",
        "prefix": "fort",
        "body": [
            "for _ in range(int(input())):",
            "    $1",
            ""
        ]
    },

    "flinp": {
        "scope": "cpp",
        "prefix": "flinp",
        "body": [
            "freopen(\"$1in.txt\", \"r\", stdin);",
            "freopen(\"$1out.txt\", \"w\", stdout);"
        ]
    }
}
